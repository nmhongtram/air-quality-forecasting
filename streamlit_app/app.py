import streamlit as st
import requests
import pandas as pd
from matplotlib import cm
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go
from datetime import datetime, timedelta
import os
import time


# Config
API_URL = os.getenv("API_URL", "http://localhost:8000")
STATION_NAME = "H√† N·ªôi - Tr·∫°m An Kh√°nh"
COLORS = {
    'pm25': '#FF5722',
    'co': '#4CAF50',
    'no2': '#2196F3', 
    'aqi': '#9C27B0'
}
WHO_PM25_GUIDELINE = 5

# Breakpoints cho PM2.5 (¬µg/m¬≥)
PM25_BREAKPOINTS = [
    (0.0, 12.0, 0, 50),
    (12.1, 35.4, 51, 100),
    (35.5, 55.4, 101, 150),
    (55.5, 150.4, 151, 200),
    (150.5, 250.4, 201, 300),
    (250.5, 350.4, 301, 400),
    (350.5, 500.4, 401, 500),
]


# Layout
st.set_page_config(page_title="Air Quality Dashboard", layout="wide")
st.title(f"üåé GI√ÅM S√ÅT CH·∫§T L∆Ø·ª¢NG KH√îNG KH√ç üåé")
st.subheader(f"{STATION_NAME}")

st.markdown("""
    <style>
        /* ƒê·ªïi m√†u n·ªÅn sidebar */
        section[data-testid="stSidebar"] {
            background-color: #B3E5FC;
        }

        /* M√†u ch·ªØ trong sidebar */
        section[data-testid="stSidebar"] * {
            color: #01579B;
        }
    </style>
""", unsafe_allow_html=True)



# Sidebar controls
with st.sidebar:
    st.header("C√†i ƒë·∫∑t")
    auto_refresh = st.checkbox("T·ª± ƒë·ªông c·∫≠p nh·∫≠t", value=True, key="auto_refresh")
    refresh_interval = st.slider("Kho·∫£ng th·ªùi gian c·∫≠p nh·∫≠t (ph√∫t)", 1, 60, 30, key="refresh_interval")

    model_options = ["RNN", "LSTM", "GRU"]
    selected_model = st.selectbox("Ch·ªçn m√¥ h√¨nh d·ª± ƒëo√°n", model_options, index=0, key="model_select")

    num_days = st.slider("Hi·ªÉn th·ªã d·ªØ li·ªáu qu√° kh·ª© (ng√†y)", min_value=0, max_value=4, value=2, step=1, key="num_days")


# Main content
placeholder = st.empty()

def get_aqi_message_color(aqi):
    if aqi <= 50:
        return "üü¢ T·ªët: Kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe.", "success"
    elif aqi <= 100:
        return "üü° V·ª´a ph·∫£i: C√≥ th·ªÉ ·∫£nh h∆∞·ªüng nh·∫π ƒë·∫øn nh√≥m nh·∫°y c·∫£m.", "info"
    elif aqi <= 150:
        return "üü† K√©m: Nh√≥m nh·∫°y c·∫£m n√™n h·∫°n ch·∫ø ho·∫°t ƒë·ªông ngo√†i tr·ªùi.", "warning"
    elif aqi <= 200:
        return "üî¥ X·∫•u: Nh√≥m nh·∫°y c·∫£m tr√°nh ra ngo√†i. Ng∆∞·ªùi kh·ªèe m·∫°nh n√™n h·∫°n ch·∫ø.", "error"
    elif aqi <= 300:
        return "üü£ R·∫•t x·∫•u: H·∫°n ch·∫ø t·ªëi ƒëa ho·∫°t ƒë·ªông ngo√†i tr·ªùi.", "error"
    else:
        return "üü§ Nguy h·∫°i: T√¨nh tr·∫°ng kh·∫©n c·∫•p v·ªÅ s·ª©c kh·ªèe. M·ªçi ng∆∞·ªùi n√™n ·ªü trong nh√†.", "error"

# H√†m t√≠nh AQI
def compute_pm25_aqi(pm25):
    for Clow, Chigh, Ilow, Ihigh in PM25_BREAKPOINTS:
        if Clow <= pm25 <= Chigh:
            return round(((Ihigh - Ilow) / (Chigh - Clow)) * (pm25 - Clow) + Ilow)
    return None  

def calculate_aqi(row):
    if pd.notna(row['pm25']):
        return compute_pm25_aqi(row['pm25'])
    return None


# Cache d·ªØ li·ªáu l·ªãch s·ª≠
@st.cache_data(ttl=600)  # cache trong 10 ph√∫t
def fetch_historical():
    return requests.get(f"{API_URL}/historical").json()

# Cache d·ª± ƒëo√°n theo m√¥ h√¨nh
@st.cache_data(ttl=600)
def fetch_prediction(model_name):
    return requests.get(f"{API_URL}/predict?model={model_name}").json()


def update_dashboard():
    with placeholder.container():
        try:
            # L·∫•y d·ªØ li·ªáu
            historical = fetch_historical()
            prediction = fetch_prediction(selected_model.lower())

            # T·∫°o DataFrames
            if num_days == 0:
                df_hist = pd.DataFrame(historical).iloc[-1:]
            else:
                hours_hist = num_days * 24
                df_hist = pd.DataFrame(historical).iloc[-hours_hist:]
            df_pred = pd.DataFrame(prediction['prediction'])

            df_hist['aqi'] = df_hist.apply(calculate_aqi, axis=1)
            df_pred['aqi'] = df_pred.apply(calculate_aqi, axis=1)

            # D√°n nh√£n ki·ªÉu d·ªØ li·ªáu
            df_hist['type'] = 'hist'
            df_pred['type'] = 'pred'

            # Th√¥ng tin hi·ªán t·∫°i
            latest = df_hist.iloc[-1]
            latest_aqi = latest['aqi']
            latest_pm25 = latest['pm25']
            # col1, col2, col3, col4 = st.columns(4)
            # col1.metric("AQI", f"{latest_aqi:.0f}")
            # col2.metric("PM2.5", f"{latest['pm25']:.1f} ¬µg/m¬≥")
            # col3.metric("NO2", f"{latest['no2']:.1f} ¬µg/m¬≥")
            # col4.metric("CO", f"{latest['co']:.1f} ¬µg/m¬≥")
           
            col1, col2, col3, col4 = st.columns(4, gap="large")

            def bordered_metric(col, label, value):
                # M√¥ t·∫£ c√°c nh√£n
                descriptions = {
                    "AQI": "Air Quality Index",
                    "PM2.5": "H·∫°t m·ªãn (‚â§2.5 ¬µm)",
                    "NO2": "Nit∆° Dioxit",
                    "CO": "Cacbon Monoxit"
                }
                description = descriptions.get(label, "")

                col.markdown(
                    f"""
                    <div style="
                        border: 2px solid #00aaff; 
                        border-radius: 8px; 
                        padding: 10px; 
                        text-align: left;
                        width: 100%;
                    ">
                        <h4 style="margin: 0; font-size: 20px; color: gray;">{label}</h4>
                        <p style="margin: 0; font-size: 14px; color: #888;">{description}</p>
                        <p style="font-size: 32px; margin: 2px 0 0; font-weight: bold;">{value}</p>
                    </div>
                    """,
                    unsafe_allow_html=True
                )

            bordered_metric(col1, "AQI", f"{latest_aqi:.0f}")
            bordered_metric(col2, "PM2.5", f"{latest['pm25']:.1f} ¬µg/m¬≥")
            bordered_metric(col3, "NO2", f"{latest['no2']:.1f} ¬µg/m¬≥")
            bordered_metric(col4, "CO", f"{latest['co']:.1f} ¬µg/m¬≥")

            st.write("\n")  # Th√™m kho·∫£ng tr·∫Øng gi·ªØa c√°c ph·∫ßn


            # Hi·ªÉn th·ªã c·∫£nh b√°o AQI
            message, level = get_aqi_message_color(latest_aqi)
            if level == "success":
                st.success(message)
            elif level == "info":
                st.info(message)
            elif level == "warning":
                st.warning(message)
            elif level == "error":
                st.error(message)

            # C·∫£nh b√°o ri√™ng cho PM2.5
            pm25_multiple = latest_pm25 / WHO_PM25_GUIDELINE


            if pm25_multiple >= 3.0:
                st.error(
                    f"‚ÄºÔ∏è N·ªìng ƒë·ªô PM2.5 hi·ªán t·∫°i g·∫•p **{pm25_multiple:.1f} l·∫ßn** so v·ªõi "
                    f"gi√° tr·ªã h∆∞·ªõng d·∫´n h√†ng nƒÉm c·ªßa WHO (PM2.5 = {WHO_PM25_GUIDELINE})."
                )
            elif pm25_multiple >= 1.5 and pm25_multiple < 3.0:
                st.warning(
                    f"‚ö†Ô∏è N·ªìng ƒë·ªô PM2.5 hi·ªán t·∫°i g·∫•p **{pm25_multiple:.1f} l·∫ßn** so v·ªõi "
                    f"gi√° tr·ªã h∆∞·ªõng d·∫´n h√†ng nƒÉm c·ªßa WHO (PM2.5 = {WHO_PM25_GUIDELINE})."
                )
            elif pm25_multiple >= 1.0:
                st.info(
                    f"üü° N·ªìng ƒë·ªô PM2.5 hi·ªán t·∫°i v∆∞·ª£t **gi√° tr·ªã khuy·∫øn ngh·ªã c·ªßa WHO** "
                    f"(PM2.5 = {WHO_PM25_GUIDELINE})."
                )

            st.write("\n")  # Th√™m kho·∫£ng tr·∫Øng gi·ªØa c√°c ph·∫ßn
            st.subheader("Bi·ªÉu ƒë·ªì ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠")

            # T·∫°o subplot
            fig = make_subplots(
                rows=4, cols=1, 
                shared_xaxes=True,
                vertical_spacing=0.05,
                subplot_titles=("AQI", "PM2.5", "NO2", "CO")
            )

            # ===== V·∫º AQI gradient =====
            def get_color(aqi):
                if aqi <= 50: return "green"
                elif aqi <= 100: return "yellow"
                elif aqi <= 150: return "orange"
                elif aqi <= 200: return "red"
                elif aqi <= 300: return "purple"
                else: return "maroon"

            df_hist['color'] = df_hist['aqi'].apply(get_color)
            df_pred['color'] = df_pred['aqi'].apply(get_color)
            df_hist['message'] = df_hist['aqi'].apply(lambda aqi: get_aqi_message_color(aqi)[0])
            df_pred['message'] = df_pred['aqi'].apply(lambda aqi: get_aqi_message_color(aqi)[0])

            # V·∫Ω AQI qu√° kh·ª©
            fig.add_trace(go.Scattergl(
                x=df_hist['datetimeFrom_local'],
                y=df_hist['aqi'],
                mode='lines+markers',
                marker=dict(color=df_hist['color'], size=6),
                line=dict(color='gray'),
                hovertemplate="%{y}<br>%{customdata}",
                customdata=df_hist['message'],
                name='AQI (hist)'
            ), row=1, col=1)

            # V·∫Ω AQI d·ª± ƒëo√°n
            fig.add_trace(go.Scattergl(
                x=df_pred['datetimeFrom_local'],
                y=df_pred['aqi'],
                mode='lines+markers',
                marker=dict(color=df_pred['color'], size=6),
                line=dict(color='gray', dash='dot'),
                hovertemplate="%{y}<br>%{customdata}",
                customdata=df_pred['message'],
                name='AQI (pred)'
            ), row=1, col=1)

            # N·ªëi AQI
            fig.add_trace(go.Scatter(
                x=[df_hist['datetimeFrom_local'].iloc[-1], df_pred['datetimeFrom_local'].iloc[0]],
                y=[df_hist['aqi'].iloc[-1], df_pred['aqi'].iloc[0]],
                mode='lines',
                line=dict(color='gray', dash='dot'),
                showlegend=False
            ), row=1, col=1)

            # ===== V·∫º PM2.5, NO2, CO =====
            def hex_to_rgba(hex_color, alpha=0.2):
                hex_color = hex_color.lstrip('#')
                r, g, b = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
                return f'rgba({r}, {g}, {b}, {alpha})'

            def add_dual_trace(row, var, color):
                rgba_fill = hex_to_rgba(color, alpha=0.2)

                # V·∫Ω v√πng fill cho d·ªØ li·ªáu qu√° kh·ª©
                fig.add_trace(go.Scatter(
                    x=list(df_hist['datetimeFrom_local']) + list(df_hist['datetimeFrom_local'][::-1]),
                    y=list(df_hist[var]) + [0]*len(df_hist),
                    fill='toself',
                    fillcolor=rgba_fill,
                    line=dict(color='rgba(0,0,0,0)'),
                    hoverinfo='skip',
                    showlegend=False
                ), row=row, col=1)

                # V·∫Ω ƒë∆∞·ªùng line cho d·ªØ li·ªáu qu√° kh·ª©
                fig.add_trace(go.Scatter(
                    x=df_hist['datetimeFrom_local'], y=df_hist[var],
                    mode='lines', name=f'{var.upper()} (hist)',
                    line=dict(color=color),
                ), row=row, col=1)

                # V·∫Ω v√πng fill cho d·ª± ƒëo√°n
                fig.add_trace(go.Scatter(
                    x=list(df_pred['datetimeFrom_local']) + list(df_pred['datetimeFrom_local'][::-1]),
                    y=list(df_pred[var]) + [0]*len(df_pred),
                    fill='toself',
                    fillcolor=rgba_fill,
                    line=dict(color='rgba(0,0,0,0)'),
                    hoverinfo='skip',
                    showlegend=False
                ), row=row, col=1)

                # V·∫Ω ƒë∆∞·ªùng line d·ª± ƒëo√°n
                fig.add_trace(go.Scatter(
                    x=df_pred['datetimeFrom_local'], y=df_pred[var],
                    mode='lines', name=f'{var.upper()} (pred)',
                    line=dict(color=color, dash='dot')
                ), row=row, col=1)

                # ƒê∆∞·ªùng n·ªëi gi·ªØa qu√° kh·ª© v√† d·ª± ƒëo√°n (line)
                x_connect = [df_hist['datetimeFrom_local'].iloc[-1], df_pred['datetimeFrom_local'].iloc[0]]
                y_connect = [df_hist[var].iloc[-1], df_pred[var].iloc[0]]

                # Fill d∆∞·ªõi ƒëo·∫°n n·ªëi
                fig.add_trace(go.Scatter(
                    x=x_connect + x_connect[::-1],
                    y=y_connect + [0, 0],
                    fill='toself',
                    fillcolor=rgba_fill,
                    line=dict(color='rgba(0,0,0,0)'),
                    hoverinfo='skip',
                    showlegend=False
                ), row=row, col=1)

                # Line ƒëo·∫°n n·ªëi
                fig.add_trace(go.Scatter(
                    x=x_connect, y=y_connect,
                    mode='lines',
                    line=dict(color=color, dash='dot'),
                    showlegend=False
                ), row=row, col=1)


            add_dual_trace(2, 'pm25', COLORS['pm25'])
            add_dual_trace(3, 'no2', COLORS['no2'])
            add_dual_trace(4, 'co', COLORS['co'])

            # Layout
            fig.update_layout(
                height=900,
                title_text=f"Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠: Quan s√°t & D·ª± ƒëo√°n ({selected_model.upper()})",
                hovermode="x unified",
                showlegend=True,
                plot_bgcolor="#f8f8f8"
            )

            fig.update_yaxes(title_text="AQI", row=1, col=1)
            for i in range(2, 5):
                fig.update_yaxes(title_text="¬µg/m¬≥", row=i, col=1)
            fig.update_xaxes(title_text="Th·ªùi gian", row=4, col=1)

            st.plotly_chart(fig, use_container_width=True)

        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi: {str(e)}")



# Auto-refresh logic
if auto_refresh:
    while True:
        update_dashboard()
        time.sleep(refresh_interval * 60)
else:
    update_dashboard()


